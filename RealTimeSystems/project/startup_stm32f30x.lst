


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000         
    3 00000000 00000400 
                       Stack_Size
                               EQU              0x00000400
    4 00000000         
    5 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
    6 00000000         Stack_Mem
                               SPACE            Stack_Size
    7 00000400         __initial_sp
    8 00000400         
    9 00000400         
   10 00000400                 PRESERVE8
   11 00000400                 THUMB
   12 00000400         
   13 00000400         
   14 00000400         ; Vector Table Mapped to Address 0 at Reset
   15 00000400                 AREA             RESET, DATA, READONLY
   16 00000000                 EXPORT           __Vectors
   17 00000000                 EXPORT           __Vectors_End
   18 00000000                 EXPORT           __Vectors_Size
   19 00000000         
   20 00000000 00000000 
                       __Vectors
                               DCD              __initial_sp ; Top of Stack
   21 00000004 00000000        DCD              Reset_Handler ; Reset Handler
   22 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 2 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00         SPACE            168
   23 000000B0 00000000        DCD              TIM2_Handler
   24 000000B4         __Vectors_End
   25 000000B4         
   26 000000B4 000000B4 
                       __Vectors_Size
                               EQU              __Vectors_End - __Vectors
   27 000000B4         
   28 000000B4                 AREA             |.text|, CODE, READONLY
   29 00000000         
   30 00000000         SaveContext
                               PROC
   31 00000000                 EXPORT           SaveContext
   32 00000000         ; POINER TO CONTEXT IN R0 (argument)
   33 00000000         
   34 00000000 9903            LDR              r1, [sp, #12] ; r0 from stack -
                                                            > r1
   35 00000002 6001            STR              r1, [r0, #0x00] ; r1 (temp) -> 
                                                            context.gpr;
   36 00000004         
   37 00000004 9904            LDR              r1, [sp, #12+4] ; r1 from stack
                                                             -> r1
   38 00000006 6041            STR              r1, [r0, #0x04] ; r1 (temp) -> 
                                                            context.gpr;
   39 00000008         
   40 00000008 9905            LDR              r1, [sp, #12+8] ; r2 from stack
                                                             -> r1
   41 0000000A 6081            STR              r1, [r0, #0x08] ; r1 (temp) -> 
                                                            context.gpr;
   42 0000000C         
   43 0000000C 9906            LDR              r1, [sp, #12+12] ; r3 from stac
                                                            k -> r1
   44 0000000E 60C1            STR              r1, [r0, #0x0C] ; r1 (temp) -> 
                                                            context.gpr;
   45 00000010         
   46 00000010 6104            STR              r4, [r0, #0x10] ; r4 (temp) -> 



ARM Macro Assembler    Page 3 


                                                            context.gpr;
   47 00000012 6145            STR              r5, [r0, #0x14] ; r5 (temp) -> 
                                                            context.gpr;
   48 00000014 6186            STR              r6, [r0, #0x18] ; r6 (temp) -> 
                                                            context.gpr;
   49 00000016 61C7            STR              r7, [r0, #0x1C] ; r7 (temp) -> 
                                                            context.gpr;
   50 00000018 F8C0 8020       STR              r8, [r0, #0x20] ; r8 (temp) -> 
                                                            context.gpr;
   51 0000001C F8C0 9024       STR              r9, [r0, #0x24] ; r9 (temp) -> 
                                                            context.gpr;
   52 00000020 F8C0 A028       STR              r10, [r0, #0x28] ; r10 (temp) -
                                                            > context.gpr;
   53 00000024 F8C0 B02C       STR              r11, [r0, #0x2C] ; r11 (temp) -
                                                            > context.gpr;
   54 00000028         
   55 00000028 9907            LDR              r1, [sp, #12+16] ; r12 from sta
                                                            ck -> r1
   56 0000002A 6301            STR              r1, [r0, #0x30] ; r1 (temp) -> 
                                                            context.gpr;
   57 0000002C         
   58 0000002C 9909            LDR              r1, [sp, #12+24] ; PC (ReturnAd
                                                            derss()) from stack
                                                             -> r1
   59 0000002E 6341            STR              r1, [r0, #0x34] ; r1 (temp) -> 
                                                            context.pc;
   60 00000030         
   61 00000030 9908            LDR              r1, [sp, #12+20] ; LR from stac
                                                            k -> r1
   62 00000032 6381            STR              r1, [r0, #0x38] ; r1 (temp) -> 
                                                            context.lr;
   63 00000034         
   64 00000034 4669            MOV              r1, sp
   65 00000036 63C1            STR              r1, [r0, #0x3c] ; r1 (temp) -> 
                                                            context.sp;
   66 00000038         
   67 00000038 990A            LDR              r1, [sp, #12+28] ; xPSR from st
                                                            ack -> r1
   68 0000003A 6401            STR              r1, [r0, #0x40] ; r1 (temp) -> 
                                                            context.psw;
   69 0000003C         
   70 0000003C 4770            BX               LR
   71 0000003E                 ENDP
   72 0000003E         
   73 0000003E         RestoreContext
                               PROC
   74 0000003E                 EXPORT           RestoreContext
   75 0000003E 9A00            LDR              R2,[sp, #0] ; sp from struct ->
                                                             r1
   76 00000040 9B01            LDR              R3,[sp, #4]
   77 00000042 9C02            LDR              R4,[sp, #8]
   78 00000044         
   79 00000044 6BC1            LDR              R1,[r0, #0x3c] ; sp from struct
                                                             -> r1
   80 00000046 468D            mov              SP,R1       ; r1 -> sp
   81 00000048         
   82 00000048 9200            STR              R2,[sp, #0] ; sp from struct ->
                                                             r1
   83 0000004A 9301            STR              R3,[sp, #4]



ARM Macro Assembler    Page 4 


   84 0000004C 9402            STR              R4,[sp, #8]
   85 0000004E         
   86 0000004E         
   87 0000004E 6801            LDR              r1, [r0, #0x00] ; r0 from conte
                                                            xt.gpr -> r1
   88 00000050 9103            STR              r1, [sp, #12] ; r1 (temp) -> st
                                                            ack;
   89 00000052         
   90 00000052 6841            LDR              r1, [r0, #0x04] ; r1 from  cont
                                                            ext.gpr-> r1
   91 00000054 9104            STR              r1, [sp, #12+4] ; r1 (temp) ->s
                                                            tack context.gpr;
   92 00000056         
   93 00000056 6881            LDR              r1, [r0, #0x08] ; r2 from stack
                                                             -> r1
   94 00000058 9105            STR              r1, [sp, #12+8] ; r1 (temp) -> 
                                                            context.gpr;
   95 0000005A         
   96 0000005A 68C1            LDR              r1, [r0, #0x0C] ; r3 from stack
                                                             -> r1
   97 0000005C 9106            STR              r1, [sp, #12+12] ; r1 (temp) ->
                                                             context.gpr;
   98 0000005E         
   99 0000005E 6901            LDR              r1 ,[r0, #0x10] ; r4 (temp) -> 
                                                            context.gpr;
  100 00000060 460C            mov              r4,r1       ;
  101 00000062 6941            LDR              r1 ,[r0, #0x14] ; r4 (temp) -> 
                                                            context.gpr;
  102 00000064 460D            mov              r5,r1       ;
  103 00000066 6981            LDR              r1 ,[r0, #0x18] ; r4 (temp) -> 
                                                            context.gpr;
  104 00000068 460E            mov              r6,r1       ;
  105 0000006A 69C1            LDR              r1 ,[r0, #0x1C] ; r4 (temp) -> 
                                                            context.gpr;
  106 0000006C 460F            mov              r7,r1       ;
  107 0000006E 6A01            LDR              r1 ,[r0, #0x20] ; r4 (temp) -> 
                                                            context.gpr;
  108 00000070 4688            mov              r8,r1       ;
  109 00000072 6A41            LDR              r1 ,[r0, #0x24] ; r4 (temp) -> 
                                                            context.gpr;
  110 00000074 4689            mov              r9,r1       ;
  111 00000076 6A81            LDR              r1 ,[r0, #0x28] ; r4 (temp) -> 
                                                            context.gpr;
  112 00000078 468A            mov              r10,r1      ;
  113 0000007A 6AC1            LDR              r1 ,[r0, #0x2C] ; r4 (temp) -> 
                                                            context.gpr;
  114 0000007C 468B            mov              r11,r1      ;
  115 0000007E         
  116 0000007E 6B01            LDR              r1, [r0, #0x30] ; r12 from stac
                                                            k -> r1
  117 00000080 9107            STR              r1, [sp, #12+16] ; r1 (temp) ->
                                                             context.gpr;
  118 00000082         
  119 00000082 6B41            LDR              r1, [r0, #0x34] ; PC (ReturnAdd
                                                            erss()) from stack 
                                                            -> r1
  120 00000084 9109            STR              r1, [sp, #12+24] ; r1 (temp) ->
                                                             context.pc;
  121 00000086         



ARM Macro Assembler    Page 5 


  122 00000086 6B81            LDR              r1, [r0, #0x38] ; LR from stack
                                                             -> r1
  123 00000088 9108            STR              r1, [sp, #12+20] ; r1 (temp) ->
                                                             context.lr;
  124 0000008A         
  125 0000008A         
  126 0000008A 6C01            LDR              r1, [r0, #0x40] ; xPSR from sta
                                                            ck -> r1
  127 0000008C 910A            STR              r1,[sp, #12+28] ; r1 (temp) -> 
                                                            context.psw;
  128 0000008E         
  129 0000008E         
  130 0000008E         
  131 0000008E 4770            BX               LR
  132 00000090                 ENDP
  133 00000090         
  134 00000090         TIM2_Handler
                               PROC
  135 00000090                 IMPORT           OSkernel
  136 00000090         
  137 00000090 4670            MOV              R0, LR
  138 00000092 B401            PUSH             {R0}
  139 00000094         
  140 00000094 F7FF FFFE       BL               OSkernel
  141 00000098         
  142 00000098 BC01            POP              {R0}
  143 0000009A 4686            MOV              LR, R0
  144 0000009C         
  145 0000009C F04F 4080       LDR              R0, =0x40000000
  146 000000A0 6901            LDR              R1, [R0, #0x10]
  147 000000A2 4A32            LDR              R2, =~0x00000001
  148 000000A4 EA01 0102       AND              R1, R2
  149 000000A8 6101            STR              R1, [R0, #0x10]
  150 000000AA         
  151 000000AA         ;LDR R0, =0x48001000
  152 000000AA         ;LDR R1, [R0, #0x14]
  153 000000AA         ;LDR R2, =0x00000800
  154 000000AA         ;EOR R1,R2
  155 000000AA         ;STR R1,[R0,#0x14]
  156 000000AA         
  157 000000AA F3BF 8F6F       ISB
  158 000000AE         
  159 000000AE 4770            BX               LR
  160 000000B0                 ENDP
  161 000000B0         
  162 000000B0         ; Reset handler
  163 000000B0         Reset_Handler
                               PROC
  164 000000B0         
  165 000000B0                 EXPORT           Reset_Handler             [WEAK
]
  166 000000B0         
  167 000000B0                 IMPORT           OSinit
  168 000000B0         
  169 000000B0         
  170 000000B0         
  171 000000B0         
  172 000000B0         ; init
  173 000000B0         ; SystemInit()



ARM Macro Assembler    Page 6 


  174 000000B0         
  175 000000B0         ; rcc start
  176 000000B0         ; mod led port
  177 000000B0 482F            LDR              R0, =0x40021000
  178 000000B2 6941            LDR              R1, [R0, #0x14]
  179 000000B4 F44F 1200       LDR              R2, =0x00200000
  180 000000B8 EA41 0102       ORR              R1,R2
  181 000000BC 6141            STR              R1,[R0,#0x14]
  182 000000BE         
  183 000000BE         ; mod timer port
  184 000000BE 482C            LDR              R0, =0x40021000
  185 000000C0 69C1            LDR              R1, [R0, #0x1C]
  186 000000C2 F04F 0201       LDR              R2, =0x00000001
  187 000000C6 EA41 0102       ORR              R1,R2
  188 000000CA 61C1            STR              R1,[R0,#0x1C]
  189 000000CC         
  190 000000CC         ; timer counter settings
  191 000000CC         ; cnt reg
  192 000000CC F04F 4080       LDR              R0, =0x40000000
  193 000000D0 F04F 0200       LDR              R2, =0x00000000
  194 000000D4 6242            STR              R2, [R0, #0x24]
  195 000000D6         
  196 000000D6         ; arr reg
  197 000000D6 F04F 4080       LDR              R0, =0x40000000
  198 000000DA F44F 727A       LDR              R2, = 1000
  199 000000DE 62C2            STR              R2, [R0, #0x2C]
  200 000000E0         
  201 000000E0         ; psc reg
  202 000000E0 F04F 4080       LDR              R0, =0x40000000
  203 000000E4 F04F 0200       LDR              R2, = 0     ;400
  204 000000E8 6282            STR              R2, [R0, #0x28]
  205 000000EA         
  206 000000EA         ; dier reg
  207 000000EA F04F 4080       LDR              R0, =0x40000000
  208 000000EE F04F 0201       LDR              R2, =0x00000001
  209 000000F2 60C2            STR              R2, [R0, #0x0C]
  210 000000F4         
  211 000000F4         ; nvic_iser
  212 000000F4 481F            LDR              R0, =0xE000E100
  213 000000F6 F04F 5280       LDR              R2, =0x10000000
  214 000000FA 6002            STR              R2, [R0, #0x00]
  215 000000FC         
  216 000000FC         ; cr1 reg
  217 000000FC F04F 4080       LDR              R0, =0x40000000
  218 00000100 6801            LDR              R1, [R0, #0x00]
  219 00000102 F04F 0201       LDR              R2, =0x00000001
  220 00000106 EA41 0102       ORR              R1,R2
  221 0000010A 6001            STR              R1,[R0,#0x00]
  222 0000010C         
  223 0000010C         
  224 0000010C         
  225 0000010C         ; moder on
  226 0000010C 481A            LDR              R0, =0x48001000
  227 0000010E 6801            LDR              R1, [R0, #0x00]
  228 00000110 4A1A            LDR              R2, =0x40400000
  229 00000112 EA41 0102       ORR              R1,R2
  230 00000116 6001            STR              R1,[R0,#0x00]
  231 00000118         
  232 00000118         ;include from main.c



ARM Macro Assembler    Page 7 


  233 00000118         
  234 00000118         
  235 00000118         
  236 00000118 F7FF FFFE       BL               OSinit
  237 0000011C         
  238 0000011C                 IMPORT           main
  239 0000011C 4818            LDR              R0,=main
  240 0000011E 4780            BLX              R0
  241 00000120         
  242 00000120         loop_off_true
  243 00000120         ; block
  244 00000120 B672            CPSID            I
  245 00000122         
  246 00000122         ; loop start conditions
  247 00000122 F8DF B060       LDR              R11, =0x000F4240
  248 00000126 F8DF C05C       LDR              R12, =0x000F4240
  249 0000012A         
  250 0000012A         ; odr on
  251 0000012A 6941            LDR              R1, [R0, #0x14]
  252 0000012C F44F 4200       LDR              R2, =0x00008000
  253 00000130         
  254 00000130         ; waiting loop start consitions
  255 00000130 F8DF 9054       LDR              R9,  =0x00051615
  256 00000134         
  257 00000134         loop_wait_false
  258 00000134         ; wait actions
  259 00000134 F1A9 0901       SUB              R9, #0x00000001
  260 00000138 F1B9 0F00       CMP              R9, #0x00000000
  261 0000013C D1FA            BNE              loop_wait_false
  262 0000013E         
  263 0000013E         ;continue odr on
  264 0000013E EA41 0102       ORR              R1,R2
  265 00000142 6141            STR              R1,[R0,#0x14]
  266 00000144         
  267 00000144         ; unblock
  268 00000144 B662            CPSIE            I
  269 00000146         
  270 00000146         loop_on_false
  271 00000146         ; wait off loop   
  272 00000146 F1AB 0B01       SUB              R11, #0x00000001
  273 0000014A F1BB 0F00       CMP              R11, #0x00000000
  274 0000014E D000            BEQ              loop_on_true
  275 00000150 D1F9            BNE              loop_on_false
  276 00000152         
  277 00000152         loop_on_true
  278 00000152         ; odr off
  279 00000152 6941            LDR              R1, [R0, #0x14]
  280 00000154 4A0D            LDR              R2, =~0x00008000
  281 00000156 EA01 0102       AND              R1,R2
  282 0000015A 6141            STR              R1,[R0,#0x14]
  283 0000015C         
  284 0000015C         loop_off_false                       ; wait off loop 
  285 0000015C F1AC 0C01       SUB              R12, #0x00000001
  286 00000160 F1BC 0F00       CMP              R12, #0x00000000
  287 00000164 D0DC            BEQ              loop_off_true
  288 00000166 D1F9            BNE              loop_off_false
  289 00000168 E7FE            B                .
  290 0000016A         
  291 0000016A                 ENDP



ARM Macro Assembler    Page 8 


  292 0000016A         
  293 0000016A         
  294 0000016A 00 00           ALIGN
  295 0000016C         
  296 0000016C         
  297 0000016C                 END
              FFFFFFFE 
              40021000 
              E000E100 
              48001000 
              40400000 
              00000000 
              000F4240 
              00051615 
              FFFF7FFF 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\sta
rtup_stm32f30x.d -o.\startup_stm32f30x.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\C
MSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F30x --predefine="__EVAL SETA 1" --list=
.\startup_stm32f30x.lst startup_stm32f30x.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 5 in file startup_stm32f30x.s
   Uses
      None
Comment: STACK unused
Stack_Mem 00000000

Symbol: Stack_Mem
   Definitions
      At line 6 in file startup_stm32f30x.s
   Uses
      None
Comment: Stack_Mem unused
__initial_sp 00000400

Symbol: __initial_sp
   Definitions
      At line 7 in file startup_stm32f30x.s
   Uses
      At line 20 in file startup_stm32f30x.s
Comment: __initial_sp used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 15 in file startup_stm32f30x.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 20 in file startup_stm32f30x.s
   Uses
      At line 16 in file startup_stm32f30x.s
      At line 26 in file startup_stm32f30x.s

__Vectors_End 000000B4

Symbol: __Vectors_End
   Definitions
      At line 24 in file startup_stm32f30x.s
   Uses
      At line 17 in file startup_stm32f30x.s
      At line 26 in file startup_stm32f30x.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 28 in file startup_stm32f30x.s
   Uses
      None
Comment: .text unused
Reset_Handler 000000B0

Symbol: Reset_Handler
   Definitions
      At line 163 in file startup_stm32f30x.s
   Uses
      At line 21 in file startup_stm32f30x.s
      At line 165 in file startup_stm32f30x.s

RestoreContext 0000003E

Symbol: RestoreContext
   Definitions
      At line 73 in file startup_stm32f30x.s
   Uses
      At line 74 in file startup_stm32f30x.s
Comment: RestoreContext used once
SaveContext 00000000

Symbol: SaveContext
   Definitions
      At line 30 in file startup_stm32f30x.s
   Uses
      At line 31 in file startup_stm32f30x.s
Comment: SaveContext used once
TIM2_Handler 00000090

Symbol: TIM2_Handler
   Definitions
      At line 134 in file startup_stm32f30x.s
   Uses
      At line 23 in file startup_stm32f30x.s
Comment: TIM2_Handler used once
loop_off_false 0000015C

Symbol: loop_off_false
   Definitions
      At line 284 in file startup_stm32f30x.s
   Uses
      At line 288 in file startup_stm32f30x.s
Comment: loop_off_false used once
loop_off_true 00000120

Symbol: loop_off_true
   Definitions
      At line 242 in file startup_stm32f30x.s
   Uses
      At line 287 in file startup_stm32f30x.s
Comment: loop_off_true used once
loop_on_false 00000146




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: loop_on_false
   Definitions
      At line 270 in file startup_stm32f30x.s
   Uses
      At line 275 in file startup_stm32f30x.s
Comment: loop_on_false used once
loop_on_true 00000152

Symbol: loop_on_true
   Definitions
      At line 277 in file startup_stm32f30x.s
   Uses
      At line 274 in file startup_stm32f30x.s
Comment: loop_on_true used once
loop_wait_false 00000134

Symbol: loop_wait_false
   Definitions
      At line 257 in file startup_stm32f30x.s
   Uses
      At line 261 in file startup_stm32f30x.s
Comment: loop_wait_false used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Stack_Size 00000400

Symbol: Stack_Size
   Definitions
      At line 3 in file startup_stm32f30x.s
   Uses
      At line 6 in file startup_stm32f30x.s
Comment: Stack_Size used once
__Vectors_Size 000000B4

Symbol: __Vectors_Size
   Definitions
      At line 26 in file startup_stm32f30x.s
   Uses
      At line 18 in file startup_stm32f30x.s
Comment: __Vectors_Size used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSinit 00000000

Symbol: OSinit
   Definitions
      At line 167 in file startup_stm32f30x.s
   Uses
      At line 236 in file startup_stm32f30x.s
Comment: OSinit used once
OSkernel 00000000

Symbol: OSkernel
   Definitions
      At line 135 in file startup_stm32f30x.s
   Uses
      At line 140 in file startup_stm32f30x.s
Comment: OSkernel used once
main 00000000

Symbol: main
   Definitions
      At line 238 in file startup_stm32f30x.s
   Uses
      At line 239 in file startup_stm32f30x.s
Comment: main used once
3 symbols
355 symbols in table
